class FrontMiddleBack:
    def __init__(self):
        self.front = []
        self.back = []

    def pushFront(self, val: int) -> None:
        self.front.append(val)
        self._balance()

    def pushMiddle(self, val: int) -> None:
        self.front.append(val)
        self._balance()

    def pushBack(self, val: int) -> None:
        self.back.append(val)
        self._balance()

    def popFront(self) -> int:
        if self.isEmpty():
            return -1

        if self.front:
            return self.front.pop()
        else:
            return self.back.pop(0)

    def popMiddle(self) -> int:
        if self.isEmpty():
            return -1

        if len(self.front) > len(self.back):
            return self.front.pop()
        else:
            return self.back.pop(0)

    def popBack(self) -> int:
        if self.isEmpty():
            return -1

        if self.back:
            return self.back.pop()
        else:
            return self.front.pop()

    def _balance(self) -> None:
        if len(self.front) > len(self.back) + 1:
            self.back.insert(0, self.front.pop())
        elif len(self.front) < len(self.back):
            self.front.append(self.back.pop(0))

    def isEmpty(self) -> bool:
        return len(self.front) == 0 and len(self.back) == 0
fmb = FrontMiddleBack()
fmb.pushFront(1)
fmb.pushBack(2)
fmb.pushMiddle(3)
fmb.pushMiddle(4)
print(fmb.popFront())  # Output: 1
print(fmb.popMiddle()) # Output: 3
print(fmb.popMiddle()) # Output: 4
print(fmb.popBack())   # Output: 2
